
module type T = sig type t val x : t end;;

(* BAD *)
let f () = let x = ref [] in let g (implicit M : T) () = x := [M.x] in ();;

(* BAD *)
let f (x : 'a) (implicit M : T) = (x : M.t); ();;

(* OK *)
let f (implicit M : T) (x : M.t) y = (y : M.t); ();;

(* BAD *)
let rec f (implicit M : T) (x : M.t) y = (y : M.t); ();;

(* OK *)
let f (g : (implicit M : T) -> M.t -> unit) () = ();;

(* OK *)
let f (implicit M : T) (implicit N : T) = N.x;;
